L1: *Reviewed processing parts*
  L1C:
    fromProc/InstructionCache:
      -L1C takes the read/write instruction and checks if it has it in L1D, if it does it passes the instruction to L1D queue
      -If not in L1D, check WB/victim cache and retrieve it from there if necessary and pass the data back to Proc if it was a read
      -If not in WB/Victim, check if there is already a waiting line for that address, if no waiting line pass instruction along to L2
    from L1D:
      -Read/Write: this is data coming back from L1D for the instruction, pass along to processor
      -Eviction: 
        -If eviction came from L1C in order to make room for data that came back:
          -L1C has already cleared its values, put line in either WB or victim cache
        -If eviction came from L2 in order to keep mutual inclusion:
          -L1C already cleared its values, do not put in WB/Victim, pass directly to L2
    from L2C:
	  -Read/Write:
	    -This is data (put in QItem.data) for the instruction that we sent, store (Put instruction) the data in L1D but be sure to set dirty bit in L1C with that of QItem
		  -evict something if necessary, be sure to set dirty bit so L1D knows if it needs to 
		-Then process the instruction, then check for a queue waiting on this data and process those as well
	  -Eviction:
	    -L2C is asking us to evict something to maintain mutual inclusion, we cannot send this data to WB or victim (although it may already be in WB/Victim)
		-Grab the data where ever it is in L1, clear the values there then pass the eviction back to L2
		-Is data that is coming from L2 to L1 clean or dirty?
  L1D:
    from L1C:
	  Read/Write:
	    -This mean L1D has the data we need for an instruction, either write to the address or pass along the data for a read
	  Eviction:
	    -L1C is in charge of where to put the evicted line, just clear out the spot in L1D then pass the eviction back to L1C with the data/address to evict
	  Put:
	    -An eviction should have already come before this instruction to make a spot available, so just put the data/address in the available spot
L2:
  L2C: 
    -As soon as L2C gives L1C an eviction, as far as L2 is concerned the data has been evicted. It will only get a response if that address was dirty and needs to be written back
	-When L2 gives data to L1 it needs to let it know whether or not that data is dirty or clean (set bit on QItem)
	-L2 has to keep track of maintaining mutual inclusion, it does this by evicting data from L1 when necessary
	
	-from L1C:
	  -Read/Write:
	    -This is just a request from L1 to grab the data necessary for these instructions
	    -Check if data is in L1D, if it is pass QItem along to it to retrieve it
	    -If not in L1D, check if in write buffer, if so just grab it from there and send it back to L1 (ADD TO L1 ADDRESSES)
	    -If not in L1D or WB, pass QItem along to memory for retrieval
	  -Eviction:
	    -Eviction received from L1C means we need to store that data in L2 (REMOVE FROM L1 ADDRESSES)
	    -We should already have this address so look to just create a Put for that address
	    -If spot that new data needs is taken and a different address than the new data, create eviction for L2D (If old data is clean = REMOVE FROM L2 ADDRESSES, since L2D will not be putting this in WB)
	     and be sure to set dirty bit of eviction with that of evicted data as well as clear the values in the controller entry in L2C
	    -Now that we have the open spot we need, use Put instruction to store this data in L2D (ADD TO L2 ADDRESSES)
	-from L2D:
	  -Read/Write:
	    -We now have the data needed that L1C requested, pass this along to L1C (ADD TO L1 ADDRESSES)
	  -Eviction:
	    -We evicted from L2D and it was dirty so we need to write this to WB
	    -Check for open spot in WB, if none create new eviction for that data in WB, (REMOVE FROM L2 ADDRESSES) and pass eviction to Memory
	    -Now that we have open spot in WB, write this eviction to the open spot and be done
	-from Memory:
	  -Read/Write:
	    -Memory is giving us data we requested for a read or write
	    -We need to store this data in L2D, but first we need to make room if spot is not open (create eviction if needed -REMOVE FROM L2 ADDRESSES if entry there is clean) (using Put instruction) before passing along to L1
	    -Once we pass Put instruction to L2D (ADD TO L2 ADDRESSES), we can pass this along to L1C
	-Maintaining mutual inclusion: This process might have to take priority after every cycle of processing? No because mutual inclusion will be broken 
	 in our mind the moment we put the data that breaks it into the Queue for L1 but the actual data is not even there yet, stick to pass necessary evictions to Queue
	  -Anytime we: write something to L2D, evict something to memory, pass something to L1C, we need to track it so we have record of what data is in L2 and L1
	  -We will need to create some process that fires after every 'cycle' that compares addresses in L1 vs L2 and evicts anything from L1 necessary
	  -Make sure when we compare the sets we ignore -1
  L2D:
    -from L2C:
      -Read/Write: This is just a request to get the data (We use put to actually write to L2D)
        -Grab the data it wants and put it on QItem, not instruction, then pass back to L2C
      -Put: When L1C evicts something we try and put it in L2
        -Store the data at the requested address, the address in L2D should either be -1 (because we evicted it beforehand) or it should be the same as what is on the Put instruction
        -This address could already be in the spot, we are just overwriting it
      -Eviction: Making room for something that was just evicted by L1 or something new from memory coming into L2C and it needed to make room
        -If it is dirty (Eviction instruction has this bit), save data to Eviction instruction and pass QItem back to L1C and clear data
        -If it is clean just reset the values
        
  Memory:
    -from L2C:
      -Eviction: Just write this data
	  -Read/Write: Just retrieve this data and add to QItem
  
 Implementing Write Merging:
   -If we ever have an address in the WB that is dirty and then have another write to that L1C just writes to it while already in
    the WB so it merges right away?

Write instructions are currently not returned past L1D! Need to figure out how to show that they are done



